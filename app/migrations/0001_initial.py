# Generated by Django 4.1.13 on 2025-06-23 04:43

import bson.objectid
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('mobile_number', models.CharField(blank=True, max_length=20, null=True)),
                ('otp', models.IntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('date', models.DateField(auto_now_add=True)),
                ('attendance', djongo.models.fields.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('exam_name', models.CharField(blank=True, max_length=255, null=True)),
                ('total_mark', models.IntegerField(blank=True, null=True)),
                ('exam_date', models.DateField()),
                ('subjects', djongo.models.fields.JSONField()),
                ('start_time', models.TimeField(null=True)),
                ('end_time', models.TimeField(null=True)),
                ('attendance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.attendance')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('create', models.CharField(blank=True, max_length=255, null=True)),
                ('update', models.CharField(blank=True, max_length=255, null=True)),
                ('delete_permission', models.CharField(blank=True, max_length=255, null=True)),
                ('view', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rolle',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('rolle_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolClass',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('class_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Standard',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('student_stander', models.CharField(blank=True, max_length=255, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('subject', models.CharField(blank=True, max_length=255, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('qualification', models.CharField(blank=True, max_length=100, null=True)),
                ('school_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.schoolclass')),
                ('standard', djongo.models.fields.ArrayReferenceField(on_delete=django.db.models.deletion.CASCADE, to='app.standard')),
                ('subject', djongo.models.fields.ArrayReferenceField(on_delete=django.db.models.deletion.CASCADE, to='app.subject')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('day_of_week', models.CharField(blank=True, choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=10, null=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('school_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.schoolclass')),
                ('subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.subject')),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherAttendance',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('date', models.DateField(auto_now_add=True)),
                ('today_present', models.BooleanField(null=True)),
                ('reason', models.CharField(blank=True, max_length=255, null=True)),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('roll_number', models.CharField(blank=True, max_length=20, null=True)),
                ('school_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.schoolclass')),
                ('standard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.standard')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('marks_obtained', djongo.models.fields.JSONField()),
                ('total_marks', models.IntegerField()),
                ('percentage', models.FloatField()),
                ('grade', models.CharField(blank=True, max_length=2, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.exam')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.student')),
            ],
        ),
        migrations.AddField(
            model_name='exam',
            name='standard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.standard'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='teacher',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.teacher'),
        ),
        migrations.AddField(
            model_name='user',
            name='permission',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.permission'),
        ),
        migrations.AddField(
            model_name='user',
            name='rolle',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.rolle'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='attendance',
            unique_together={('teacher', 'date')},
        ),
    ]
